// Code generated by protoc-gen-go.
// source: msg.proto
// DO NOT EDIT!

package msgs

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PublicKey struct {
	N                []byte `protobuf:"bytes,1,opt" json:"N,omitempty"`
	E                *int64 `protobuf:"varint,2,opt" json:"E,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}

func (m *PublicKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *PublicKey) GetE() int64 {
	if m != nil && m.E != nil {
		return *m.E
	}
	return 0
}

type PrivateKey struct {
	PublicKey        *PublicKey `protobuf:"bytes,1,opt,name=publicKey" json:"publicKey,omitempty"`
	D                []byte     `protobuf:"bytes,2,opt" json:"D,omitempty"`
	Primes           [][]byte   `protobuf:"bytes,3,rep,name=primes" json:"primes,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *PrivateKey) Reset()         { *m = PrivateKey{} }
func (m *PrivateKey) String() string { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()    {}

func (m *PrivateKey) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PrivateKey) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *PrivateKey) GetPrimes() [][]byte {
	if m != nil {
		return m.Primes
	}
	return nil
}

type SignatureRequest struct {
	VoterPublicKey   *PublicKey `protobuf:"bytes,1,opt,name=voterPublicKey" json:"voterPublicKey,omitempty"`
	BlindedBallot    []byte     `protobuf:"bytes,2,opt,name=blindedBallot" json:"blindedBallot,omitempty"`
	VoterSignature   []byte     `protobuf:"bytes,3,opt,name=voterSignature" json:"voterSignature,omitempty"`
	KeySignature     []byte     `protobuf:"bytes,4,opt,name=keySignature" json:"keySignature,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SignatureRequest) Reset()         { *m = SignatureRequest{} }
func (m *SignatureRequest) String() string { return proto.CompactTextString(m) }
func (*SignatureRequest) ProtoMessage()    {}

func (m *SignatureRequest) GetVoterPublicKey() *PublicKey {
	if m != nil {
		return m.VoterPublicKey
	}
	return nil
}

func (m *SignatureRequest) GetBlindedBallot() []byte {
	if m != nil {
		return m.BlindedBallot
	}
	return nil
}

func (m *SignatureRequest) GetVoterSignature() []byte {
	if m != nil {
		return m.VoterSignature
	}
	return nil
}

func (m *SignatureRequest) GetKeySignature() []byte {
	if m != nil {
		return m.KeySignature
	}
	return nil
}

type SignatureResponse struct {
	Request                *SignatureRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	BlindedBallotSignature []byte            `protobuf:"bytes,2,opt,name=blindedBallotSignature" json:"blindedBallotSignature,omitempty"`
	XXX_unrecognized       []byte            `json:"-"`
}

func (m *SignatureResponse) Reset()         { *m = SignatureResponse{} }
func (m *SignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SignatureResponse) ProtoMessage()    {}

func (m *SignatureResponse) GetRequest() *SignatureRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SignatureResponse) GetBlindedBallotSignature() []byte {
	if m != nil {
		return m.BlindedBallotSignature
	}
	return nil
}

type Vote struct {
	Ballot           []byte `protobuf:"bytes,1,opt,name=ballot" json:"ballot,omitempty"`
	BallotSignature  []byte `protobuf:"bytes,2,opt,name=ballotSignature" json:"ballotSignature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}

func (m *Vote) GetBallot() []byte {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *Vote) GetBallotSignature() []byte {
	if m != nil {
		return m.BallotSignature
	}
	return nil
}

type BallotEntry struct {
	Id               *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ballot           []byte  `protobuf:"bytes,2,opt,name=ballot" json:"ballot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BallotEntry) Reset()         { *m = BallotEntry{} }
func (m *BallotEntry) String() string { return proto.CompactTextString(m) }
func (*BallotEntry) ProtoMessage()    {}

func (m *BallotEntry) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BallotEntry) GetBallot() []byte {
	if m != nil {
		return m.Ballot
	}
	return nil
}

type VoteResponse struct {
	BallotEntry          []byte `protobuf:"bytes,1,opt,name=ballotEntry" json:"ballotEntry,omitempty"`
	BallotEntrySignature []byte `protobuf:"bytes,2,opt,name=ballotEntrySignature" json:"ballotEntrySignature,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}

func (m *VoteResponse) GetBallotEntry() []byte {
	if m != nil {
		return m.BallotEntry
	}
	return nil
}

func (m *VoteResponse) GetBallotEntrySignature() []byte {
	if m != nil {
		return m.BallotEntrySignature
	}
	return nil
}

type Voter struct {
	Name             *string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key              *PublicKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Signature        []byte     `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Voter) Reset()         { *m = Voter{} }
func (m *Voter) String() string { return proto.CompactTextString(m) }
func (*Voter) ProtoMessage()    {}

func (m *Voter) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Voter) GetKey() *PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Voter) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Server struct {
	Address          *string    `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Key              *PublicKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}

func (m *Server) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Server) GetKey() *PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type ElectionConfig struct {
	VoterListServer                *Server  `protobuf:"bytes,1,opt,name=voterListServer" json:"voterListServer,omitempty"`
	BallotServer                   *Server  `protobuf:"bytes,2,opt,name=ballotServer" json:"ballotServer,omitempty"`
	VoteServer                     *Server  `protobuf:"bytes,3,opt,name=voteServer" json:"voteServer,omitempty"`
	FinalVoteSetServer             *Server  `protobuf:"bytes,4,opt,name=finalVoteSetServer" json:"finalVoteSetServer,omitempty"`
	FinalSignatureRequestSetServer *Server  `protobuf:"bytes,5,opt,name=finalSignatureRequestSetServer" json:"finalSignatureRequestSetServer,omitempty"`
	Voters                         []*Voter `protobuf:"bytes,6,rep,name=voters" json:"voters,omitempty"`
	BallotDescription              *string  `protobuf:"bytes,7,opt,name=ballotDescription" json:"ballotDescription,omitempty"`
	XXX_unrecognized               []byte   `json:"-"`
}

func (m *ElectionConfig) Reset()         { *m = ElectionConfig{} }
func (m *ElectionConfig) String() string { return proto.CompactTextString(m) }
func (*ElectionConfig) ProtoMessage()    {}

func (m *ElectionConfig) GetVoterListServer() *Server {
	if m != nil {
		return m.VoterListServer
	}
	return nil
}

func (m *ElectionConfig) GetBallotServer() *Server {
	if m != nil {
		return m.BallotServer
	}
	return nil
}

func (m *ElectionConfig) GetVoteServer() *Server {
	if m != nil {
		return m.VoteServer
	}
	return nil
}

func (m *ElectionConfig) GetFinalVoteSetServer() *Server {
	if m != nil {
		return m.FinalVoteSetServer
	}
	return nil
}

func (m *ElectionConfig) GetFinalSignatureRequestSetServer() *Server {
	if m != nil {
		return m.FinalSignatureRequestSetServer
	}
	return nil
}

func (m *ElectionConfig) GetVoters() []*Voter {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *ElectionConfig) GetBallotDescription() string {
	if m != nil && m.BallotDescription != nil {
		return *m.BallotDescription
	}
	return ""
}

type VoterData struct {
	Name                   *string       `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Key                    *PrivateKey   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ElectionConfig         []byte        `protobuf:"bytes,2,opt" json:"ElectionConfig,omitempty"`
	KeySignature           []byte        `protobuf:"bytes,3,opt,name=keySignature" json:"keySignature,omitempty"`
	Ballot                 []byte        `protobuf:"bytes,4,opt,name=ballot" json:"ballot,omitempty"`
	BlindingFactor         []byte        `protobuf:"bytes,5,opt,name=blindingFactor" json:"blindingFactor,omitempty"`
	BlindedBallotSignature []byte        `protobuf:"bytes,6,opt,name=blindedBallotSignature" json:"blindedBallotSignature,omitempty"`
	VoteResponse           *VoteResponse `protobuf:"bytes,7,opt,name=voteResponse" json:"voteResponse,omitempty"`
	XXX_unrecognized       []byte        `json:"-"`
}

func (m *VoterData) Reset()         { *m = VoterData{} }
func (m *VoterData) String() string { return proto.CompactTextString(m) }
func (*VoterData) ProtoMessage()    {}

func (m *VoterData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VoterData) GetKey() *PrivateKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *VoterData) GetElectionConfig() []byte {
	if m != nil {
		return m.ElectionConfig
	}
	return nil
}

func (m *VoterData) GetKeySignature() []byte {
	if m != nil {
		return m.KeySignature
	}
	return nil
}

func (m *VoterData) GetBallot() []byte {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *VoterData) GetBlindingFactor() []byte {
	if m != nil {
		return m.BlindingFactor
	}
	return nil
}

func (m *VoterData) GetBlindedBallotSignature() []byte {
	if m != nil {
		return m.BlindedBallotSignature
	}
	return nil
}

func (m *VoterData) GetVoteResponse() *VoteResponse {
	if m != nil {
		return m.VoteResponse
	}
	return nil
}

type ObserverData struct {
	ElectionConfig         []byte          `protobuf:"bytes,2,opt" json:"ElectionConfig,omitempty"`
	KeySignature           []byte          `protobuf:"bytes,3,opt,name=keySignature" json:"keySignature,omitempty"`
	Ballot                 []byte          `protobuf:"bytes,4,opt,name=ballot" json:"ballot,omitempty"`
	BlindingFactor         []byte          `protobuf:"bytes,5,opt,name=blindingFactor" json:"blindingFactor,omitempty"`
	BlindedBallotSignature []byte          `protobuf:"bytes,6,opt,name=blindedBallotSignature" json:"blindedBallotSignature,omitempty"`
	Votes                  []*Vote         `protobuf:"bytes,8,rep,name=votes" json:"votes,omitempty"`
	VoteResponses          []*VoteResponse `protobuf:"bytes,7,rep,name=voteResponses" json:"voteResponses,omitempty"`
	XXX_unrecognized       []byte          `json:"-"`
}

func (m *ObserverData) Reset()         { *m = ObserverData{} }
func (m *ObserverData) String() string { return proto.CompactTextString(m) }
func (*ObserverData) ProtoMessage()    {}

func (m *ObserverData) GetElectionConfig() []byte {
	if m != nil {
		return m.ElectionConfig
	}
	return nil
}

func (m *ObserverData) GetKeySignature() []byte {
	if m != nil {
		return m.KeySignature
	}
	return nil
}

func (m *ObserverData) GetBallot() []byte {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *ObserverData) GetBlindingFactor() []byte {
	if m != nil {
		return m.BlindingFactor
	}
	return nil
}

func (m *ObserverData) GetBlindedBallotSignature() []byte {
	if m != nil {
		return m.BlindedBallotSignature
	}
	return nil
}

func (m *ObserverData) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *ObserverData) GetVoteResponses() []*VoteResponse {
	if m != nil {
		return m.VoteResponses
	}
	return nil
}

func init() {
}
